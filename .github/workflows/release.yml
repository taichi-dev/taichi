name: Publishing Release
on:
  release:
    # https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows#release
    types: [published]
  # When triggered by schedule and workflow_dispatch, github.event.action is an empty string.
  # We use this to distinguish which taichi to release.
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

env:
  PROD_PWD: ${{ secrets.PYPI_PWD_PROD }}
  NIGHT_PWD: ${{ secrets.PYPI_PWD_NIGHTLY }}
  METADATA_USERNAME: ${{ secrets.METADATA_USERNAME }}
  METADATA_PASSWORD: ${{ secrets.METADATA_PASSWORD }}
  METADATA_URL: ${{ secrets.METADATA_URL }}

jobs:
  add_version_to_database:
    name: Add version to database
    # Skip running release workflow on forks
    if: github.repository_owner == 'taichi-dev'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: set tag
        id: tag
        run: echo ::set-output name=version::${GITHUB_REF#refs/*/}

      - name: Save new version
        run: |
          python3 -m pip install requests==2.26
          [ -z "${{ github.event.action }}" ] || python3 misc/save_new_version.py
        env:
          RELEASE_VERSION: ${{ steps.tag.outputs.version }}

  # This job set environment matrix with respect to production release and nightly release.
  matrix_prep:
    runs-on: ubuntu-latest
    needs: add_version_to_database
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      matrix_osx: ${{ steps.set-matrix.outputs.matrix_osx }}
    steps:
      - id: set-matrix
        run: |
          if [ -z "${{ github.event.action }}" ]; then
            # For nightly release, we only run on python 3.8
            echo '::set-output name=matrix::{"include":[{"name":"taichi-nightly","python":"3.8","conda_python":"py38"}]}"'

            # M1 only supports py38 and py39(conda), so change matrix.
            echo '::set-output name=matrix_osx::{"include":[{"name":"taichi-nightly","python":"3.8"}]}"'
          else
            # For production release, we run on four python versions.
            echo '::set-output name=matrix::{"include":[{"name":"taichi","python":"3.6","conda_python":"py36"},{"name":"taichi","python":"3.7","conda_python":"py37"},{"name":"taichi","python":"3.8","conda_python":"py38"},{"name":"taichi","python":"3.9","conda_python":"py39"}]}"'

            echo '::set-output name=matrix_osx::{"include":[{"name":"taichi","python":"3.8"},{"name":"taichi","python":"3.9"}]}"'
          fi

  build_and_upload_linux:
    name: Build and Upload (linux only)
    needs: matrix_prep
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}
    runs-on: [self-hosted, cuda, vulkan, cn, release]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: Get sccache cache
        uses: actions/cache@v2
        with:
          path: sccache_cache
          key: sccache-linux-gpu-${{ github.sha }}
          restore-keys: |
            sccache-linux-gpu-

      - name: Build
        run: |
          mkdir -m777 shared
          docker create --user dev --name taichi_build --gpus all -v /tmp/.X11-unix:/tmp/.X11-unix \
            -e DISPLAY -e PY -e GPU_BUILD -e TAICHI_CMAKE_ARGS -e PROJECT_NAME \
            registry.taichigraphics.com/taichidev-ubuntu18.04:v0.1.1 \
            /home/dev/taichi/.github/workflows/scripts/unix_build.sh
          tar -cf - ../${{ github.event.repository.name }} --mode u=+rwx,g=+rwx,o=+rwx --owner 1000 --group 1000 | docker cp - taichi_build:/home/dev/
          docker start -a taichi_build
          docker cp taichi_build:/home/dev/taichi/dist shared/dist
          docker cp taichi_build:/home/dev/taichi/build shared/build
        env:
          PY: ${{ matrix.conda_python }}
          GPU_BUILD: ON
          TAICHI_CMAKE_ARGS: -DTI_WITH_OPENGL:BOOL=ON -DTI_WITH_CC:BOOL=OFF -DTI_WITH_VULKAN:BOOL=ON -DTI_BUILD_TESTS:BOOL=ON -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache
          PROJECT_NAME: ${{ matrix.name }}
          DISPLAY: ":1"

      - name: Archive Wheel Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.name }}-py${{ matrix.python }}-linux.whl
          path: shared/dist/*.whl
          retention-days: 20

      - name: Test
        run: |
          docker create --user dev --name taichi_test --gpus all -v /tmp/.X11-unix:/tmp/.X11-unix \
            -e DISPLAY -e PY -e GPU_TEST registry.taichigraphics.com/taichidev-ubuntu18.04:v0.1.1 \
            /home/dev/unix_test.sh
          docker cp .github/workflows/scripts/unix_test.sh taichi_test:/home/dev/unix_test.sh
          docker cp ./requirements_test.txt taichi_test:/home/dev/requirements_test.txt
          docker cp shared/dist/ taichi_test:/home/dev/
          docker cp shared/build/ taichi_test:/home/dev/
          docker cp tests/ taichi_test:/home/dev/
          docker start -a taichi_test
        env:
          PY: ${{ matrix.conda_python }}
          GPU_TEST: ON
          DISPLAY: ":1"

      - name: Upload PyPI
        env:
          PROJECT_NAME: ${{ matrix.name }}
        run: |
          cd shared
          pip install twine requests==2.26
          python3 ../misc/upload_release.py

      - name: clean docker container
        if: always()
        run: |
          docker rm taichi_build taichi_test -f

  build_and_upload_mac:
    name: Build and Upload (macOS only)
    needs: matrix_prep
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: Get sccache cache
        uses: actions/cache@v2
        with:
          path: sccache_cache
          key: sccache-mac-${{ github.sha }}
          restore-keys: |
            sccache-mac-

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Download Pre-Built LLVM 10.0.0
        run: python misc/ci_download.py
        env:
          CI_PLATFORM: macos-10.15

      - name: Create Python Wheel
        run: |
          export PATH=$(pwd)/taichi-llvm/bin/:$PATH
          bash .github/workflows/scripts/unix_build.sh
        env:
          TAICHI_CMAKE_ARGS: -DTI_WITH_VULKAN:BOOL=OFF -DTI_WITH_OPENGL:BOOL=OFF -DTI_WITH_CC:BOOL=OFF -DTI_BUILD_TESTS:BOOL=ON -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache
          PROJECT_NAME: ${{ matrix.name }}
          CXX: clang++

      - name: Archive Wheel Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.name }}-py${{ matrix.python }}-macos.whl
          path: dist/*.whl
          retention-days: 20

      - name: Test
        run: .github/workflows/scripts/unix_test.sh
        env:
          TI_WANTED_ARCHS: "cpu"

      - name: Upload PyPI
        env:
          # https://docs.github.com/en/free-pro-team@latest/actions/reference/encrypted-secrets#using-encrypted-secrets-in-a-workflow
          PROJECT_NAME: ${{ matrix.name }}
        run: python misc/upload_release.py

  build_and_upload_m1:
    name: Build and Upload (Apple M1)
    needs: matrix_prep
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix_osx) }}
    runs-on: [self-hosted, m1]
    defaults:
      run:
        shell: "/usr/bin/arch -arch arm64e /bin/bash --noprofile --norc -eo pipefail {0}"
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: Get sccache cache
        uses: actions/cache@v2
        with:
          path: sccache_cache
          key: sccache-m1-${{ github.sha }}
          restore-keys: |
            sccache-m1-

      - name: Build
        run: |
          brew install molten-vk
          # We hacked here because conda activate in CI won't update python PATH
          # automatically. So we don't activate and use desired python version
          # directly.
          export PATH=/Users/github/miniforge3/envs/$PYTHON/bin:$PATH
          bash .github/workflows/scripts/unix_build.sh
          brew uninstall molten-vk
        env:
          TAICHI_CMAKE_ARGS: -DTI_WITH_OPENGL:BOOL=OFF -DTI_WITH_CUDA:BOOL=OFF -DTI_WITH_CC:BOOL=OFF -DTI_WITH_VULKAN:BOOL=ON -DTI_BUILD_TESTS:BOOL=ON -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache
          PROJECT_NAME: ${{ matrix.name }}
          PYTHON: ${{ matrix.python }}
          CXX: clang++

      - name: Archive Wheel Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.name }}-py${{ matrix.python }}-macos-m1.whl
          path: dist/*.whl
          retention-days: 20

      - name: Test
        run: |
          export PATH=/Users/github/miniforge3/envs/$PYTHON/bin:$PATH
          .github/workflows/scripts/unix_test.sh
        env:
          TI_WANTED_ARCHS: "metal,vulkan,cpu"
          PYTHON: ${{ matrix.python }}

      - name: Upload PyPI
        env:
          PROJECT_NAME: ${{ matrix.name }}
          PYTHON: ${{ matrix.python }}
        run: |
          export PATH=/Users/github/miniforge3/envs/$PYTHON/bin:$PATH
          python misc/upload_release.py

  build_and_upload_macos_1014:
    name: Build and Upload (macos 1014)
    needs: matrix_prep
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}
    runs-on: [self-hosted, macos10.14]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: Get sccache cache
        uses: actions/cache@v2
        with:
          path: sccache_cache
          key: sccache-1014-${{ github.sha }}
          restore-keys: |
            sccache-1014-

      - name: Build
        run: |
          # We hacked here because conda activate in CI won't update python PATH
          # automatically. So we don't activate and use desired python version
          # directly.
          export PATH=/Users/buildbot6/miniconda3/envs/$PYTHON/bin:$PATH
          export LLVM_DIR=/Users/buildbot6/taichi-llvm-10.0.0-macos
          export PATH=$LLVM_DIR/bin:$PATH
          bash .github/workflows/scripts/unix_build.sh
        env:
          TAICHI_CMAKE_ARGS: -DTI_WITH_OPENGL:BOOL=OFF -DTI_WITH_CUDA:BOOL=OFF -DTI_WITH_CC:BOOL=OFF -DTI_WITH_VULKAN:BOOL=OFF -DTI_BUILD_TESTS:BOOL=ON -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache
          PROJECT_NAME: ${{ matrix.name }}
          PYTHON: ${{ matrix.python }}
          CXX: clang++

      - name: Archive Wheel Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.name }}-py${{ matrix.python }}-macos-1014.whl
          path: dist/*.whl
          retention-days: 20

      - name: Test
        run: |
          export PATH=/Users/buildbot6/miniconda3/envs/$PYTHON/bin:$PATH
          .github/workflows/scripts/unix_test.sh
        env:
          TI_WANTED_ARCHS: "cpu"
          PYTHON: ${{ matrix.python }}

      - name: Upload PyPI
        env:
          PROJECT_NAME: ${{ matrix.name }}
          PYTHON: ${{ matrix.python }}
        run: |
          export PATH=/Users/buildbot6/miniconda3/envs/$PYTHON/bin:$PATH
          python misc/upload_release.py

  build_and_upload_windows:
    name: Build and Upload (Windows only)
    needs: matrix_prep
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Add Visual Studio Shell to ENV
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Get sccache cache
        uses: actions/cache@v2
        with:
          path: ccache_cache
          key: ccache-win64-clang-${{ github.sha }}
          restore-keys: |
            ccache-win64-clang-

      - name: Build Python Wheel
        shell: powershell
        run: |
          .\.github\workflows\scripts\win_build.ps1 -installVulkan -libsDir C:\
          venv\Scripts\python -m pip install $(dir dist\*.whl)
        env:
          PROJECT_NAME: ${{ matrix.name }}

      - name: Archive Wheel Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.name }}-py${{ matrix.python }}-windows.whl
          path: dist/*.whl
          retention-days: 20

      - name: Test
        shell: powershell
        run: |
          $env:PATH = ";C:\taichi_llvm\bin;C:\taichi_clang\bin;" + $env:PATH
          . venv\Scripts\activate.ps1
          python -c "import taichi"
          pip install torch
          ti diagnose
          python tests/run_tests.py -vr2 -t2
        env:
          TI_SKIP_VERSION_CHECK: ON

      - name: Upload PyPI
        shell: powershell
        env:
          PROJECT_NAME: ${{ matrix.name }}
        run: |
          python -m pip install twine
          venv\Scripts\python misc/upload_release.py
