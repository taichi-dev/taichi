name: Build and Test
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - master
      - rc-*
  schedule:
    - cron: '0 18 * * *'  # For testing the offline cache, GMT 18 == GMT+8 02

concurrency:
  group: ${{ github.event.number || github.run_id }}
  cancel-in-progress: true

env:
  TI_CI: "1"
  TI_SKIP_VERSION_CHECK: 'ON'
  TI_LITE_TEST: ${{ github.event_name == 'pull_request' && ! contains(github.event.pull_request.labels.*.name, 'full-ci') && ! startsWith(github.base_ref, 'rc-') && '1' || '' }}
  TI_TEST_OFFLINE_CACHE: ${{ github.event.schedule == '0 18 * * *' && '1' || '' }}
  CI_IMAGE_VERSION: '202304251731'
  TI_USE_GIT_CACHE: ${{ vars.TI_USE_GIT_CACHE }}

jobs:
  show_environ:
    name: Show Environment Variables
    # Disable this workflow on forks
    if: github.repository_owner == 'taichi-dev'
    runs-on: [self-hosted, Linux]
    steps:
    - name: Environment Variables
      run: env
    - name: Github Object
      run: |
        cat <<'EOF'
        ${{ toJson(github) }}
        EOF

  check_files:
    name: Check files
    # Disable this workflow on forks
    if: github.repository_owner == 'taichi-dev'
    outputs:
      run_job: ${{ steps.check_files.outputs.run_job }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: '0'

      - name: check modified files
        id: check_files
        run: |
          echo "Concurrency group: ${{ github.event.number || github.run_id }}"
          echo "=============== list modified files ==============="
          git diff --name-only @^

          chore_files=( LICENSE CONTRIBUTING.md README.md netlify.toml )
          chore_dirs=( docs )
          run_job=false

          for file in $(git diff --name-only @^); do
            is_chore=false

            for chore_file in ${chore_files[*]}; do
              [[ ${file} == ${chore_file} ]] && is_chore=true && break
            done

            for chore_dir in ${chore_dirs[*]}; do
              [[ ${file} == ${chore_dir}/* ]] && is_chore=true && break
            done

            if ! ${is_chore}; then
              run_job=true
              break
            fi
          done

          if ${run_job}; then
            echo "run_job=true"  >> $GITHUB_OUTPUT
          else
            echo "run_job=false" >> $GITHUB_OUTPUT
          fi


  aot_build_and_test_android_unity_examples:
    name: AOT Build and Test Android Unity Examples
    # Skip this job when testing the offline cache
    if: ${{ github.event.schedule != '0 18 * * *' }}
    needs: check_files
    runs-on: [self-hosted, Linux, cn]
    timeout-minutes: 60
    permissions:
      packages: read
      contents: read
    env:
      REDIS_HOST: 172.16.5.1
      PY: '3.9'
    steps:
      - name: Workaround checkout Needed single revision issue
        run: git submodule foreach 'git rev-parse HEAD > /dev/null 2>&1 || rm -rf $PWD' || true

      - uses: actions/checkout@v3
        name: Checkout taichi
        with:
          fetch-depth: '0'
          submodules: "recursive"

      - name: Prepare Environment
        if: ${{ needs.check_files.outputs.run_job != 'false' }}
        run: >-
          . .github/workflows/scripts/common-utils.sh;
          prepare-build-cache;

          TAICHI_WHEEL_DIR=$(mktemp -d);
          echo TAICHI_WHEEL_DIR=$TAICHI_WHEEL_DIR >> $GITHUB_ENV;
          chmod 0777 $TAICHI_WHEEL_DIR;

          echo CI_DOCKER_RUN_EXTRA_ARGS="
          -e REDIS_HOST
          -v $(pwd):/home/dev/taichi
          -v $TAICHI_WHEEL_DIR:/taichi-wheel
          " >> $GITHUB_ENV;

      - name: Build Host Taichi
        if: ${{ needs.check_files.outputs.run_job != 'false' }}
        run: |
          . .github/workflows/scripts/common-utils.sh
          ci-docker-run --name taichi-build-host \
            -v $TAICHI_WHEEL_DIR:/home/dev/taichi/dist \
            registry.botmaster.tgr/taichi-build-cuda:${{ env.CI_IMAGE_VERSION }} \
            /home/dev/taichi/.github/workflows/scripts/build.py
        env:
          TAICHI_CMAKE_ARGS: >-
            -DTI_WITH_OPENGL:BOOL=ON
            -DTI_WITH_VULKAN:BOOL=ON
            -DTI_WITH_C_API=OFF

      - name: Build For Android
        if: ${{ needs.check_files.outputs.run_job != 'false' }}
        run: |
          . .github/workflows/scripts/common-utils.sh
          git clean -fxd
          ci-docker-run --name taichi-build-android \
            registry.botmaster.tgr/taichi-build-android:${{ env.CI_IMAGE_VERSION }} \
            /home/dev/taichi/.github/workflows/scripts/build.py android
        env:
          TAICHI_CMAKE_ARGS: >-
            -DTI_WITH_OPENGL:BOOL=ON
            -DTI_WITH_VULKAN:BOOL=ON
            -DTI_WITH_LLVM:BOOL=OFF
            -DTI_WITH_C_API=ON

      - name: Prepare Unity Build Environment
        if: ${{ needs.check_files.outputs.run_job != 'false' }}
        run: |
          . .github/workflows/scripts/common-utils.sh
          ci-docker-run --name taichi-prepare-unity-build-env \
            registry.botmaster.tgr/taichi-build-android:${{ env.CI_IMAGE_VERSION }} \
            /home/dev/taichi/.github/workflows/scripts/aot-demo.sh prepare-unity-build-env

      - name: Build Taichi-UnityExample
        if: ${{ needs.check_files.outputs.run_job != 'false' }}
        run: |
          . .github/workflows/scripts/common-utils.sh
          ci-docker-run --name taichi-build-unity-demo \
            registry.taichigraphics.com/unityci-editor:ubuntu-2020.3.14f1-android-1-with-secret-sauce \
            /home/dev/taichi/.github/workflows/scripts/aot-demo.sh build-unity-demo

      - name: Run Taichi-UnityExample (C-API)
        if: ${{ needs.check_files.outputs.run_job != 'false' }}
        run: |
          . .github/workflows/scripts/common-utils.sh
          ci-docker-run --name taichi-run-unity-demo \
            registry.botmaster.tgr/taichi-test-android:${{ env.CI_IMAGE_VERSION }} \
            /home/dev/taichi/.github/workflows/scripts/aot-demo.sh smoke-test-unity-demo
