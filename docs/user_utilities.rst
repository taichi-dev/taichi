User utilities
==============

Taichi provides a number of development tools that can be used to greatly improve development efficiency. This section aims to provide a detailed description of some of the commonly used sections. Including:

* Logging
* Profiler
* Assertation

Logging
-------

Based on spdlog, Taichi provides a series of APIs for printing logs; these functions can be used for recording during Taichi's runtime.

.. Note::

    The current taichi logging API only supports standard output, not output to files.

.. function:: ti.set_logging_level(level)

    :parameter level: (string) a valid logging level

    - This function is used to set the level of print logs. Currently the log levels in taichi are classified from low to high as ``ti.TRACE``, ``ti.DEBUG``, ``ti.INFO``, ``ti.WARN``, ``ti.ERR`` and ``ti.CRITICAL``. These logging levels are essentially strings "trace", "debug", "info", "warn", "error" and "critical" respectively.

    - The lower the log level, the more content will be printed out. For example, if you set the print level to ``ti.TRACE``, all logs will be printed; if you set the print level to ``ti.ERR``, only those log which is generated by `ti.critical()` and ``ti.error()`` will be output.

    - The default logging level is ``ti.INFO``.You can also override the default logging level by setting the environment variable like ``TI_LOG_LEVEL=warn``.

.. function:: ti.info(info)

    :parameter info: (string) logging info

    Print out the input string info to stdout if the logging level is lower or equal to ``ti.INFO``. For example:

.. code-block:: python

    import taichi as ti
    ti.init(arch = ti.cpu)

    ti.set_logging_level(ti.INFO)
    var = ti.var(ti.f32, shape = 1)

    @ti.kernel
    def compute():
        var[0] = 1.0
        ti.info(f"set var[0] = 1.0")

    compute()

.. Note::

    The usages of ``ti.trace``, ``ti.debug``, ``ti.error``, ``ti.critical`` are almost similar as ``ti.info``.

TODO:

    1. more explanations and examples in this logging section. can we log a taichi tensor here, why and how?

    2. ``ti.error`` and ``ti.critical`` tested fail. I need to check it again

Profiler
--------

Taichi profiler can help you easily count the time spent by your program.

- If you want to enable Taichi profiler, first set ``ti.cfg.kernel_profiler = True`` so that Taichi can begin to profile kernels.

.. function:: ti.kernel_profiler_print()

    Print the profiling result to stdout.

.. function:: ti.kernel_profiler_clear()

    Clear all profiling results collected.

- A simple profiling example can be:

.. code-block:: python

    import taichi as ti
    ti.init(arch = ti.gpu)

    ti.set_logging_level(ti.INFO)
    var = ti.var(ti.f32, shape = 1)

    @ti.kernel
    def compute():
        var[0] = 1.0
        ti.info(f"set var[0] = 1.0")

    ti.cfg.kernel_profiler = True
    compute()
    ti.kernel_profiler_print()
    ti.kernel_profiler_clear()

TODO:

    1.These explanations are not clear enough. A better example is essential.

    2. Can out profiler do more things?

Assertation
-----------
Assertation can make your Taichi program more reliable and help you debug easily.

TODO:

    1. add ``ti.static_assert``
    2. documeted it
