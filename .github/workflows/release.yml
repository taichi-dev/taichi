name: Publishing Release
on:
  release:
    # https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows#release
    types: [published]
  schedule:
    - cron: "0 0 * * *"

jobs:
  # This job set environment matrix with respect to production release and nightly release.
  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          # For nightly release, we only run on python 3.8
          [ -z "${{ github.event.action }}" ] && matrix="[{\"name\":\"taichi-nightly\",\"python\":\"3.8\"}]"
          # For production release, we run on four python versions.
          [ -z "${{ github.event.action }}" ] || matrix="[{\"name\":\"taichi\",\"python\":\"3.6\"},{\"name\":\"taichi\",\"python\":\"3.7\"},{\"name\":\"taichi\",\"python\":\"3.8\"},{\"name\":\"taichi\",\"python\":\"3.9\"}]"
          echo ::set-output name=matrix::{\"include\":$(echo $matrix)}\"

  build_and_upload_mac:
    name: Build and Upload (macOS only)
    needs: matrix_prep
    strategy:
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Download Pre-Built LLVM 10.0.0
        run: |
          python misc/ci_download.py
          mkdir taichi-llvm
          cd taichi-llvm
          unzip ../taichi-llvm.zip
        env:
          CI_PLATFORM: ${{ matrix.os }}

      - name: Create Python Wheel
        run: |
          TAICHI_REPO_DIR=`pwd`
          export PATH=$TAICHI_REPO_DIR/taichi-llvm/bin/:$PATH
          export CXX=clang++
          python -m pip install -r requirements_dev.txt
          cd python
          git fetch origin master
          export TAICHI_CMAKE_ARGS=$CI_SETUP_CMAKE_ARGS
          export COMMIT_SHA=$(git rev-parse --short "$GITHUB_SHA")
          python build.py build --project_name $PROJECT_NAME
          cd ..
          NUM_WHL=`ls dist/*.whl | wc -l`
          if [ $NUM_WHL -ne 1 ]; then echo 'ERROR: created more than 1 whl.' && exit 1; fi
          pip install dist/*.whl
        env:
          CI_SETUP_CMAKE_ARGS: -DTI_WITH_OPENGL:BOOL=OFF -DTI_WITH_CC:BOOL=OFF -DTI_BUILD_TESTS:BOOL=${{ matrix.with_cpp_tests }}
          PROJECT_NAME: ${{ matrix.name }}

      - name: Test
        run: |
          python examples/algorithm/laplace.py
          ti diagnose
          ti test -vr2 -t2

      - name: Upload PyPI
        env:
          # https://docs.github.com/en/free-pro-team@latest/actions/reference/encrypted-secrets#using-encrypted-secrets-in-a-workflow
          PROD_PWD: ${{ secrets.PYPI_PWD_PROD }}
          NIGHT_PWD: ${{ secrets.PYPI_PWD_NIGHTLY }}
        run: |
          cd python
          if [ $PROJECT_NAME == "taichi-nightly" ]; then export PYPI_PWD="$NIGHT_PWD" && python build.py upload --skip_build --testpypi --project_name $PROJECT_NAME
          elif [ $PROJECT_NAME == "taichi" ]; then export PYPI_PWD="$PROD_PWD" && python build.py upload --skip_build; fi
        env:
          PROJECT_NAME: ${{ matrix.name }}

  build_and_upload_windows:
    name: Build and Upload (Windows only)
    needs: matrix_prep
    strategy:
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}
    runs-on: windows-latest
    steps:
      - name: Install 7Zip PowerShell
        shell: powershell
        run: Install-Module 7Zip4PowerShell -Force -Verbose

      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Build Python Wheel
        shell: powershell
        run: |
          cd C:\
          Remove-item alias:curl
          curl --retry 10 --retry-delay 5 https://github.com/taichi-dev/taichi_assets/releases/download/llvm10/taichi-llvm-10.0.0-msvc2019.zip -LO
          7z x taichi-llvm-10.0.0-msvc2019.zip -otaichi_llvm
          curl --retry 10 --retry-delay 5 https://github.com/taichi-dev/taichi_assets/releases/download/llvm10/clang-10.0.0-win.zip -LO
          7z x clang-10.0.0-win.zip -otaichi_clang
          $env:PATH += ";C:\taichi_llvm\bin"
          $env:PATH += ";C:\taichi_clang\bin"
          clang --version
          cd D:\a\taichi\taichi
          python -m pip install -r requirements_dev.txt
          cd python
          git fetch origin master
          $env:TAICHI_CMAKE_ARGS = $env:CI_SETUP_CMAKE_ARGS
          $env:COMMIT_SHA = $(git rev-parse --short $env:GITHUB_SHA)
          python build.py build --project_name $env:PROJECT_NAME
          cd ..\dist
          $env:WHL = $(dir *.whl)
          python -m pip install $env:WHL
        env:
          CI_SETUP_CMAKE_ARGS: -G "Visual Studio 16 2019" -A x64 -DLLVM_DIR=C:\taichi_llvm\lib\cmake\llvm
          PROJECT_NAME: ${{ matrix.name }}

      - name: Test
        shell: powershell
        run: |
          $env:PATH += ";C:\taichi_llvm\bin"
          $env:PATH += ";C:\taichi_clang\bin"
          python -c "import taichi"
          python examples/algorithm/laplace.py
          python bin/taichi diagnose
          python bin/taichi test -vr2 -t2

      - name: Upload PyPI
        shell: powershell
        env:
          # https://docs.github.com/en/free-pro-team@latest/actions/reference/encrypted-secrets#using-encrypted-secrets-in-a-workflow
          PROD_PWD: ${{ secrets.PYPI_PWD_PROD }}
          NIGHT_PWD: ${{ secrets.PYPI_PWD_NIGHTLY }}
        run: |
          cd python
          if ( $env:PROJECT_NAME -eq "taichi-nightly" ) {$env:PYPI_PWD = "$env:NIGHT_PWD"}
          if ( $env:PROJECT_NAME -eq "taichi-nightly" ) {python build.py upload --skip_build --testpypi --project_name $env:PROJECT_NAME}
          if ( $env:PROJECT_NAME -eq "taichi" ) {$env:PYPI_PWD = "$env:PROD_PWD"}
          if ( $env:PROJECT_NAME -eq "taichi" ) {python build.py upload --skip_build}
        env:
          PROJECT_NAME: ${{ matrix.name }}
